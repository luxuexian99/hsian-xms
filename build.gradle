/**
 * gradle configuration v1.0.0
 */
apply plugin: 'java'
apply plugin: 'war'
apply plugin: 'idea'
//apply plugin: 'eclipse-wtp'

group = "org.hsian"
version = qualifyVersionIfNecessary(version)
// webAppDirName = 'src/main/webapp'
[compileJava, javadoc, compileTestJava]*.options*.encoding = 'UTF-8'

// The following is a work-around for allowing to build on JDK 8 until the
// Gradle build uses Ant 1.9.x by default. This is necessary to avoid the
// "Class not found: javac1.8" issue with Ant versions prior to 1.9.x
ant.properties["build.compiler"] = "javac1.7"

//    ext.gradleScriptDir = "${rootProject.projectDir}/gradle"
ext {
    springVersion = "4.0.5.RELEASE"
    springSecurityVersion = "3.2.4.RELEASE"
    aspectjVersion = "1.8.0"
    slf4jVersion = "1.7.5"
    log4jVersion = "1.2.16"
    h2dbVersion = "1.3.174"
    hsqldbVersion = "1.8.0.10"
    jacksonVersion = "2.2.2"
}

/** 设置 JDK 版本 */
compileJava {
    sourceCompatibility=1.7
    targetCompatibility=1.7
}
compileTestJava {
    sourceCompatibility=1.7
    targetCompatibility=1.7
}

//sourceSets {
//    main {
//        java { srcDir "src/main/java" }
//        resources { srcDir "src/main/resources" }
//    }
//    test {
//        java { srcDir "src/test/java" }
//        resources { srcDir "src/test/resources" }
//    }
//}

//    sourceSets.test.resources.srcDirs = ["src/test/resources", "src/test/java"]

/** 设置 maven 库地址 */
repositories {
    mavenLocal() //maven本地库
    mavenCentral() // 中央库
    // maven { url "http://repo.springsource.org/libs-release" }
    // flatDir { dirs 'lib' }
    // maven { url 'http://maven.oschina.net/content/groups/public/' } // 自定义库地址
}


/** 设置依赖 */
dependencies {
    // for dependencies found in artifact repositories you can use

    /** Spring */
    compile "org.springframework:spring-core:${springVersion}"
    compile "org.springframework:spring-beans:${springVersion}"
    compile "org.springframework:spring-aop:${springVersion}"
    // compile "org.springframework:spring-aspects:${springVersion}"
    compile "org.springframework:spring-context-support:${springVersion}"
    compile("org.springframework:spring-context:${springVersion}") {
        // excluding a particular transitive dependency:
        // Exclude Commons Logging in favor of SLF4j
        exclude group: "commons-logging", module: "commons-logging"
    }
    compile "org.springframework:spring-expression:${springVersion}"
    compile "org.springframework:spring-jdbc:${springVersion}"
    compile "org.springframework:spring-jms:${springVersion}"
    compile "org.springframework:spring-orm:${springVersion}"
    compile "org.springframework:spring-tx:${springVersion}"
    compile "org.springframework:spring-web:${springVersion}"
    compile "org.springframework:spring-webmvc:${springVersion}"
    // compile "org.springframework:spring-test:${springVersion}"
    compile("org.springframework.security:spring-security-config:${springSecurityVersion}") {
        // Exclude Commons Logging in favor of SLF4j
        exclude group: "commons-logging", module: "commons-logging"
    }
    compile("org.springframework.security:spring-security-web:${springSecurityVersion}") {
        // Exclude Commons Logging in favor of SLF4j
        exclude group: "commons-logging", module: "commons-logging"
        // Not required, since we don"t use method-level security with pointcut expressions
        exclude group: "org.aspectj", module: "aspectjweaver"
    }

    /** Mybatis */
    compile "org.mybatis:mybatis-spring:1.2.2"
    compile "org.mybatis:mybatis:3.2.6"
    compile "javax.persistence:persistence-api:1.0.2"

    /** CGLIB, only required and used for @Configuration usage */
    compile "cglib:cglib:3.1"
    // compile "cglib:cglib-nodep:2.2"

    /** @Inject */
    compile "javax.inject:javax.inject:1"

    /** Aspect J */
    compile "org.aspectj:aspectjrt:${aspectjVersion}"
    compile "org.aspectj:aspectjweaver:${aspectjVersion}"
    compile "org.springframework:spring-aspects:${springVersion}"

    /** Servlet */
    providedCompile "javax.servlet:javax.servlet-api:3.1.0" // 编译期
    // providedCompile "org.mortbay.jetty:servlet-api:3.0.20100224" // 新的servlet
    providedCompile "javax.servlet.jsp:jsp-api:2.1" // 2.1 or 2.2 编译期
    providedRuntime "javax.servlet.jsp.jstl:jstl-api:1.2" // 运行时

    /** mail */
    compile "javax.mail:mail:1.4.7"

    /** Logging */
    compile "org.slf4j:slf4j-api:${slf4jVersion}"
    compile "org.slf4j:jcl-over-slf4j:${slf4jVersion}"
    runtime "org.slf4j:slf4j-log4j12:${slf4jVersion}"
    runtime "log4j:log4j:${log4jVersion}"

    /** Database */
    compile "com.h2database:h2:${h2dbVersion}"
    // compile "org.hsqldb:hsqldb:${hsqldbVersion}"
    // compile "com.oracle:ojdbc14:10.2.0.4.0"
    compile "mysql:mysql-connector-java:5.1.30"
    compile "com.mchange:c3p0:0.9.2.1"

    /** Joda Time */
    compile "joda-time:joda-time:2.2"
    runtime "joda-time:joda-time-jsptags:1.0.2"

    compile "commons-lang:commons-lang:2.6"
    // compile "commons-logging:commons-logging:1.1.1"

    /** Jackson JSON Mapper */
    /* version-1 */
    // compile "org.codehaus.jackson:jackson-core-asl:1.9.2"
    // compile "org.codehaus.jackson:jackson-mapper-asl:1.9.2"
    /* version-2 */
    compile "com.fasterxml.jackson.core:jackson-core:${jacksonVersion}"
    compile "com.fasterxml.jackson.core:jackson-annotations:${jacksonVersion}"
    compile "com.fasterxml.jackson.core:jackson-databind:${jacksonVersion}"


    /** Test */
    testCompile "junit:junit:4.11"      // 测试
    // testCompile("org.hamcrest:hamcrest-all:1.3")
    testCompile "org.springframework:spring-test:${springVersion}"      // 测试
    testCompile "org.mockito:mockito-all:1.9.5"      // 测试
    // testCompile("org.mockito:mockito-core:1.9.5")

}


/*-----------发布编码 --------------- */
task publishCode << {
    /*copy {
        from
        into
    } */
    println "publishCode"
}

/*-----------发布测试 --------------- */
task publishTest << {
    println "publishTest"
}

/*-----------发布线上 --------------- */
task publishOnline << {
    println "publishOnline"
}

/*-----------  --------------- */
task printProperties << {
    println springVersion
}

/*
* Support publication of artifacts versioned by topic branch.
* CI builds supply `-P BRANCH_NAME=<TOPIC>` to gradle at build time.
* If <TOPIC> starts with 'SPR-', change version
*     from BUILD-SNAPSHOT => <TOPIC>-SNAPSHOT
*     e.g. 3.2.1.BUILD-SNAPSHOT => 3.2.1.SPR-1234-SNAPSHOT
*/
def qualifyVersionIfNecessary(version) {
    if (rootProject.hasProperty("BRANCH_NAME")) {
        def qualifier = rootProject.getProperty("BRANCH_NAME")
        if (qualifier.startsWith("SPR-")) {
            return version.replace('BUILD', qualifier)
        }
    }
    return version
}
